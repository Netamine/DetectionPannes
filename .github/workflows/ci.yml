name: CI/CD Pipeline

on:
  push:
    branches:
      - amine
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du repo
        uses: actions/checkout@v4

      - name: Installer Python et les dépendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[gdrive] pytest

      - name: Configurer Google Drive Credentials
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          echo "$GOOGLE_APPLICATION_CREDENTIALS" > gdrive-creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gdrive-creds.json
          dvc remote modify dvc_data gdrive_service_account_json_file_path gdrive-creds.json
          dvc remote modify dvc_data gdrive_use_service_account true

      - name: ⬇ Télécharger les données avec DVC
        run: dvc pull
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $PWD/gdrive-creds.json

      - name: Exécuter les tests
        run: pytest tests/

  docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du repo
        uses: actions/checkout@v4

      - name: Installer Docker et Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io docker-compose-plugin
          docker --version
          docker compose version  # Vérifier que Docker Compose est bien installé

      - name: Définir API_KEY dans l'environnement
        run: echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV

      - name: Se connecter à Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build et push des images Docker
        run: |
          # Construire les images en prenant en compte le fichier config.env
          docker compose --env-file keys/config.env build

          # Ajouter des tags dynamiques basés sur la date
          TAG=$(date +%Y%m%d%H%M)

          # Tag et push API
          docker tag detectionpannes-api:latest $DOCKER_USERNAME/detectionpannes-api:latest
          docker tag detectionpannes-api:latest $DOCKER_USERNAME/detectionpannes-api:$TAG
          docker push $DOCKER_USERNAME/detectionpannes-api:latest
          docker push $DOCKER_USERNAME/detectionpannes-api:$TAG

          # Tag et push Monitoring
          docker tag detectionpannes-monitoring:latest $DOCKER_USERNAME/detectionpannes-monitoring:latest
          docker tag detectionpannes-monitoring:latest $DOCKER_USERNAME/detectionpannes-monitoring:$TAG
          docker push $DOCKER_USERNAME/detectionpannes-monitoring:latest
          docker push $DOCKER_USERNAME/detectionpannes-monitoring:$TAG

      - name: Vérification des images Docker
        run: docker images
