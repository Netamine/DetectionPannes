name: CI/CD Pipeline

on:
  push:
    branches:
      - amine
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du repo
        uses: actions/checkout@v4

      - name: Installer Python et les d√©pendances
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc[gdrive] pytest

      - name: Configurer Google Drive Credentials
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        run: |
          echo "$GOOGLE_APPLICATION_CREDENTIALS" > gdrive-creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gdrive-creds.json
          dvc remote modify dvc_data gdrive_service_account_json_file_path gdrive-creds.json
          dvc remote modify dvc_data gdrive_use_service_account true

      - name: ‚¨á T√©l√©charger les donn√©es avec DVC
        run: dvc pull
        env:
          GOOGLE_APPLICATION_CREDENTIALS: $PWD/gdrive-creds.json

      - name: Ex√©cuter les tests
        run: pytest tests/

  docker:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du repo
        uses: actions/checkout@v4

      - name: Installer Docker et Docker Compose
        run: |
          # Installer Docker via le script officiel
          curl -fsSL https://get.docker.com | sh

          # Installer Docker Compose et jq pour la gestion JSON
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin jq

          # V√©rifier l'installation
          echo "üìå Docker install√© :"
          docker --version

          echo "üìå V√©rification Docker Compose..."
          docker compose version || echo "‚ùå ERREUR: Docker Compose non trouv√©"

          # Ajouter un lien symbolique en cas de besoin
          sudo ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose || true
          sudo ln -s /usr/bin/docker-compose /usr/local/bin/docker-compose || true

      - name: V√©rifier les variables secr√®tes
        run: |
          if [[ -z "${{ secrets.DOCKER_USERNAME }}" ]]; then
            echo "‚ùå ERREUR: DOCKER_USERNAME est vide. V√©rifiez GitHub Secrets."
            exit 1
          fi

          if [[ -z "${{ secrets.DOCKER_PASSWORD }}" ]]; then
            echo "‚ùå ERREUR: DOCKER_PASSWORD est vide. V√©rifiez GitHub Secrets."
            exit 1
          fi

          echo "‚úÖ DOCKER_USERNAME et DOCKER_PASSWORD sont bien d√©finis."

      - name: G√©n√©rer les fichiers secrets
        run: |
          mkdir -p keys  # Assurer que le dossier existe
          
          # G√©n√©rer config.env pour Docker Compose
          echo "API_KEY=${{ secrets.API_KEY }}" > keys/config.env
          
          # G√©n√©rer CleDVCJason.json pour DVC en le formatant correctement
          echo '${{ secrets.DVC_CREDENTIALS }}' | jq '.' > keys/CleDVCJason.json

          # V√©rification des fichiers cr√©√©s
          echo "üìå Contenu du dossier keys :"
          ls -l keys/
          echo "üìå V√©rification du contenu de CleDVCJason.json"
          cat keys/CleDVCJason.json | jq '.'

      - name: Se connecter √† Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build et push des images Docker
        run: |
          echo "üìå D√©but du build des images Docker"

          # Construire les images en prenant en compte le fichier config.env
          docker compose --env-file keys/config.env build || { echo "‚ùå Erreur: √©chec du build"; exit 1; }

          # Ajouter des tags dynamiques bas√©s sur la date
          TAG=$(date +%Y%m%d%H%M)

          echo "üìå Ajout des tags et push des images..."

          # V√©rification avant tagging
          if [[ -z "$DOCKER_USERNAME" ]]; then
            echo "‚ùå ERREUR: DOCKER_USERNAME est vide !"
            exit 1
          fi

          # Tag et push API
          docker tag detectionpannes-api:latest $DOCKER_USERNAME/detectionpannes-api:latest
          docker tag detectionpannes-api:latest $DOCKER_USERNAME/detectionpannes-api:$TAG
          docker push $DOCKER_USERNAME/detectionpannes-api:latest
          docker push $DOCKER_USERNAME/detectionpannes-api:$TAG

          # Tag et push Monitoring
          docker tag detectionpannes-monitoring:latest $DOCKER_USERNAME/detectionpannes-monitoring:latest
          docker tag detectionpannes-monitoring:latest $DOCKER_USERNAME/detectionpannes-monitoring:$TAG
          docker push $DOCKER_USERNAME/detectionpannes-monitoring:latest
          docker push $DOCKER_USERNAME/detectionpannes-monitoring:$TAG

          echo "‚úÖ Push termin√© avec succ√®s"

      - name: V√©rification des images Docker
        run: docker images
