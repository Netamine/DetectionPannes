from flask import Blueprint, request, jsonify, current_app
import pandas as pd
import io
import logging
import traceback

# Configuration des logs
logging.basicConfig(level=logging.INFO)

# Cr√©ation du blueprint pour les routes d'imputation
imputation_bp = Blueprint('imputation', __name__)

@imputation_bp.route('/')
def home():
    return jsonify(message="L'API fonctionne et les mod√®les sont charg√©s !")

@imputation_bp.route('/impute', methods=['POST'])
def impute():
    """
    Endpoint pour imputer les donn√©es manquantes dans un fichier CSV envoy√©.
    """
    logging.info("üì© R√©ception d'une requ√™te d'imputation")

    try:
        file = request.files.get('file')
        if not file:
            logging.error("‚ùå Aucun fichier n'a √©t√© envoy√©.")
            return jsonify({"error": "Aucun fichier n'a √©t√© envoy√©."}), 400

        content = file.read().decode('utf-8')
        if not content.strip():
            logging.error("‚ùå Le fichier CSV est vide.")
            return jsonify({"error": "Le fichier CSV est vide."}), 400

        data = pd.read_csv(io.StringIO(content))
        logging.info(f"üîç Donn√©es re√ßues avec {data.shape[0]} lignes et {data.shape[1]} colonnes")

        imputation_models = current_app.config.get('IMPUTATION_MODELS', {})

        imputable_columns = list(imputation_models.keys())
        missing_columns = [col for col in data.columns if col in imputable_columns and data[col].isnull().any()]

        if not missing_columns:
            logging.info("‚úÖ Aucune colonne imputable n'a de valeurs manquantes.")
            return jsonify({"message": "Aucune colonne imputable n'a de valeurs manquantes."}), 200

        logging.info(f"‚öôÔ∏è Imputation des colonnes manquantes : {missing_columns}")

        for col in missing_columns:
            model = imputation_models.get(col)
            if model:
                logging.info(f"üîç V√©rification du mod√®le pour la colonne {col}, type : {type(model)}")

                # V√©rifier si le mod√®le a la m√©thode get_params
                if hasattr(model, 'get_params'):
                    logging.info(f"‚úÖ Mod√®le {col} pr√™t √† l'utilisation, param√®tres : {model.get_params()}")
                else:
                    logging.error(f"‚ùå Le mod√®le {col} ne contient pas la m√©thode get_params.")
                    return jsonify({"error": f"Le mod√®le {col} ne contient pas la m√©thode get_params"}), 500

                missing_rows = data[data[col].isnull()]
                if not missing_rows.empty:
                    features = missing_rows.drop(columns=[col])
                    predictions = model.predict(features)
                    data.loc[data[col].isnull(), col] = predictions

        logging.info("‚úÖ Imputation termin√©e avec succ√®s")
        return data.to_csv(index=False), 200

    except pd.errors.EmptyDataError:
        logging.error("‚ùå Le fichier CSV est vide ou invalide.")
        return jsonify({"error": "Le fichier CSV est vide ou invalide."}), 400

    except Exception as e:
        logging.error(f"‚ùå Erreur interne : {str(e)}")
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500